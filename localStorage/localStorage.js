// LocalStorage, sessionStorage
// Объекты веб-хранилища localStorage и sessionStorage 
// позволяют хранить пары ключ/значение в браузере.

// Что в них важно – данные, 
// которые в них записаны, сохраняются после обновления страницы 
// (в случае sessionStorage) и даже после перезапуска браузера 
// (при использовании localStorage).


// Интерфейс хранилища
// localStorage.setItem(key, value) // сохранить пару ключ/значение.
// localStorage.getItem(key) // получить данные по ключу key
// localStorage.removeItem(key) // удалить данные с ключом key.
// localStorage.clear() // удалить всё.
// localStorage.key(index) // получить ключ на заданной позиции.
// localStorage.length //  количество элементов в хранилище.





// Объекты веб-хранилища нельзя перебрать в цикле, они не итерируемы.
// Но можно пройти по ним, как по обычным массивам:

// for (let i = 0; i < localStorage.length; i++) {
//   let key = localStorage.key(i);
//   console.log(`${key}: ${localStorage.getItem(key)}`);
// }


// Только строки
// Обратите внимание, что ключ и значение должны быть строками.

// Если мы используем любой другой тип, например число или объект, 
// то он автоматически преобразуется в строку:

// localStorage.setItem("user", "John");
// localStorage.setItem("user2", "Gena");
// console.log(localStorage.getItem("user")); // [object Object]
// console.log(localStorage.getItem("user2")); // [object Object]

// Мы можем использовать JSON для хранения объектов:
// localStorage.setItem(
//     'user', // obj key
//     JSON.stringify({name: "John"}) // obj value 
// );

// немного позже
// let user = JSON.parse( localStorage.getItem("user") );
// console.log( user ); // John








// Событие storage
// Когда обновляются данные в localStorage или sessionStorage, 
// генерируется событие storage со следующими свойствами:

// key – ключ, который обновился (null, если вызван .clear()).
// oldValue – старое значение (null, если ключ добавлен впервые).
// newValue – новое значение (null, если ключ был удалён).
// url – url документа, где произошло обновление.
// storageArea – объект localStorage или sessionStorage, где произошло обновление.

// Важно: событие срабатывает на всех остальных объектах window, 
// где доступно хранилище, кроме того окна, которое его вызвало.

// Давайте уточним.

// Представьте, что у вас есть два окна с одним и тем же сайтом. 
// Хранилище localStorage разделяется между ними.

// Вы можете открыть эту страницу в двух окнах браузера, 
// чтобы проверить приведённый ниже код.

// Теперь, если оба окна слушают window.onstorage, 
// то каждое из них будет реагировать на обновления, произошедшие в другом окне.




// срабатывает при обновлениях, сделанных в том же хранилище из других документов
// window.onstorage = event => { // можно также использовать window.addEventListener('storage', event => {
//   if (event.key != 'now') return;
//   console.log(event.key + ':' + event.newValue + " at " + event.url);
// };

// window.addEventListener('storage', (event) => {
//     console.log(event.key + ':' + event.newValue + " at " + event.url);
// })



// localStorage.setItem('now', Date.now());
// Обратите внимание, что событие также содержит: event.url – url-адрес документа, 
// в котором данные обновились.


// Также event.storageArea содержит объект хранилища – 
// событие одно и то же для sessionStorage и localStorage, 
// поэтому event.storageArea ссылается на то хранилище, которое было изменено. 
// Мы можем захотеть что-то записать в ответ на изменения.

// Это позволяет разным окнам одного источника обмениваться сообщениями.

// Современные браузеры также поддерживают Broadcast channel API 
// специальный API для связи между окнами одного источника, 
// он более полнофункциональный, но менее поддерживаемый. 
// Существуют библиотеки (полифилы), 
// которые эмулируют это API на основе localStorage и делают его доступным везде.



// Задачи 

// 1
// Создайте поля input и textarea, значение которого будет автоматически сохраняться при каждом его изменении.
// Когда пользователь закроет страницу и потом откроет её заново он должен увидеть последнее введённое значение.



// 2
// напишем счетчик на localStorage - + / -
// пусть будут кнопки имитирующие интерфейс localStorage

// setItem(key, value) – сохранить пару ключ/значение.
// getItem(key) – получить данные по ключу key.
// removeItem(key) – удалить данные с ключом key.
// clear() – удалить всё.
// key(index) – получить ключ на заданной позиции.
// length – количество элементов в хранилище.


